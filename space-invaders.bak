;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname space-invaders) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)

;; Space Invaders  

;; =================
;; Constants:

(define HEIGHT 500)
(define WIDTH  300)
(define MTS    (empty-scene WIDTH HEIGHT))

(define TANK-x-SPEED 30)
(define TANK-HEIGHT 30)
(define TANK-BOTTOM 10)
(define TANK-Y (- HEIGHT TANK-BOTTOM))


(define INVADER-ANGLE-45 315)
(define INVADER-ANGLE-MINUS-45 225)
(define INVADER-X-SPEED 30)
(define INVADER-Y-SPEED 30)
(define INVADER-X-BOUNCE 15)
(define INVADER-BOUNCE-RIGHT (- WIDTH INVADER-X-BOUNCE))
(define INVADER-BOUNCE-LEFT  INVADER-X-BOUNCE)

(define FIRE-SPEED 30)

(define TANK (above (rectangle  5 10  "solid" "black")
                    (rectangle 20  5  "solid" "black")
                    (ellipse   30 10  "solid" "black")))


(define INVADER (crop
                 0 0 30 20
                 (underlay/align "middle" "middle"
                                 (ellipse   17 (* INVADER-X-BOUNCE 2)  "outline" "black")
                                 (ellipse   10 (* INVADER-X-BOUNCE 2)  "outline" "black")
                                 (ellipse   (* INVADER-X-BOUNCE 2) 10  "solid"   "black"))))

(define FIRE-Y 15)
(define FIRE-FALL-OFF (-(/ FIRE-Y 2)))
(define FIRE (ellipse 10 FIRE-Y "solid" "red"))




;; =================
;; Data definitions:

(define-struct tank (x y))
;; Tank is (make-tank Number Number)
;; interp. tank at position x,y in the MTS

(define T0 (make-tank 0 TANK-Y))                    ; left edge
(define T1 (make-tank (/ WIDTH 2) TANK-Y)) ; middle
(define T2 (make-tank WIDTH TANK-Y))           ; right edge
#;
(define (fn-for-tank t)
  (... (tank-x t)
       (tank-y t)))

(define-struct fire (x y))
;; Fire (make-fire Number Number)
;; interp. a fire at position x, y

(define FIRE-1 (make-fire 0 0))
(define FIRE-2 (make-fire (/ WIDTH 2) (/ HEIGHT 2)))
(define FIRE-3 (make-fire WIDTH HEIGHT))
#;
(define (fn-for-fire f)
  (... (fire-x f)
       (fire-y f)))

(define-struct invader (x y angle))
;; Invader is (make-invader Number Number Number)
;; interp. an invader at position x, y and angle angle

(define INVADER-1 (make-invader 0 0 INVADER-ANGLE-45))
(define INVADER-2 (make-invader (/ HEIGHT 2) (/ WIDTH 2) INVADER-ANGLE-MINUS-45))
(define INVADER-3 (make-invader HEIGHT WIDTH INVADER-ANGLE-45))
#;
(define (fn-for-invader i)
  (... (invader-x i)(invader-y i)(invader-angle i)))

;; ListOfInvader is one of:
;; - empty
;; - (cons Invader ListOfInvader)
;; interp. a list of invaders

(define LOI-1 empty)
(define LOI-2 (cons INVADER-1 empty))
(define LOI-3 (cons INVADER-2 empty))
#;
(define (fn-for-loi loi)
  (cond [(empty? loi) (...)]
        [ else
          (... (fn-for-invader(first loi))      ; Invader
               (fn-for-loi(rest loi)))]))       ; ListOfInvader

(define-struct game (t f loi))
;; Game is (make-game game)
;; interp. a game with
;;                t   :  tank (x,y) position on the MTS
;;                fire: a fire ball at (x,y) on MTS
;;                loi : a list of invaders at (x,y) postion and angle

(define GAME-1 (make-game T0 FIRE-1 LOI-1))
(define GAME-2 (make-game T1 FIRE-2 LOI-2))
(define GAME-3 (make-game T2 FIRE-3 LOI-3))
#;
(define (fn-for-game g)
  (... (game-t g)(game-f g)(game-loi g)))

;; =================
;; Functions:

;; game -> game
;; start the world with (main (make-game T1 empty empty))
;; 
(define (main g)
  (big-bang g                      ; game
    (on-tick   next-frame)         ; game -> game
    (to-draw   render-behaviour)   ; game -> Image
    (stop-when end-game)           ; game -> Boolean
    (on-key    handle-key)))       ; game KeyEvent -> game

;; game -> game
;; produce the next game status -> fire (- FIRE-SPEED), invader positions
(check-expect (next-frame (make-game (/ WIDTH 2) (make-fire 100 150) (cons (make-invader 100 150 INVADER-ANGLE-45) empty))) (make-game (/ WIDTH 2) (cons (make-fire 100 (- 150 FIRE-SPEED)) empty) (cons (make-invader (+ 100 INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-45 ) empty)))
(check-expect (next-frame (make-game 150 (make-fire 50 200) (cons (make-invader 300 3 INVADER-ANGLE-MINUS-45) empty))) (make-game 150 (cons (make-fire 50 (- 200 FIRE-SPEED)) empty) (cons (make-invader (- 100 INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-45 ) empty)))
;(define (next-frame g) GAME-1); stub

(define (next-frame g)
  (make-game (game-t g) (update-fire(game-f g))(update-invaders(game-loi g))))


;; Fire -> Fire
;; Produce the next fire (updates postion, remove excess fire)
(check-expect (update-fire (make-fire 0 0)) (make-fire 0 (- 0 FIRE-SPEED)))
(check-expect (update-fire (make-fire 0 FIRE-FALL-OFF)) (make-fire 0 (- FIRE-FALL-OFF FIRE-SPEED)))
(check-expect (update-fire (make-fire 0 (- 1 FIRE-FALL-OFF))) (make-fire 0 (- 1 FIRE-FALL-OFF FIRE-SPEED)))
(check-expect (update-fire (make-fire (/ WIDTH 2) (/ HEIGHT 2))) (make-fire (/ WIDTH 2) (- (/ HEIGHT 2) FIRE-SPEED)))
;(define (update-fire lof) lof); stub

(define (update-fire f)
  (tick-fire f))  ; ListOfFire

;; Fire -> Fire
;; update fire Y position by subtracting FIRE-SPEED
(check-expect (tick-fire (make-fire   0   0)) (make-fire   0 (-   0 FIRE-SPEED)))
(check-expect (tick-fire (make-fire 120 300)) (make-fire 120 (- 300 FIRE-SPEED)))
;(define (tick-fire f) f); stub

(define (tick-fire f)
  (make-fire (fire-x f) (- (fire-y f) FIRE-SPEED)))

;; Fire -> Fire
;; Fire if fire within screen bounds (0-HEIGHT), ow empty
(check-expect (onscreen-fire? (make-fire 0 FIRE-FALL-OFF))       false)
(check-expect (onscreen-fire? (make-fire 0 (+ FIRE-FALL-OFF 1))) true)
(check-expect (onscreen-fire? (make-fire 0 (- FIRE-FALL-OFF 1))) false)
(check-expect (onscreen-fire? (make-fire 0 (/ HEIGHT 2))) true)
;(define (onscreen-fire? f) true); stub

(define (onscreen-fire? f)
  (> (fire-y f) FIRE-FALL-OFF))


#; 
(define (update-fire lof)
  (cond [(empty? lof) empty]
        [ else
          (cons (update-x-fire(first lof))     ; Fire
                (update-fire(rest  lof)))]))  ; ListOfFire

;; ListOfinvader -> ListOfInvder
;; update the invader position (x, y, angle)
(check-expect (update-invaders empty) empty)
(check-expect (update-invaders (cons (make-invader 0 0 INVADER-ANGLE-45) empty)) (cons (make-invader (+ 0 INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-45) empty)) ; 45 45
(check-expect (update-invaders (cons (make-invader 0 0 INVADER-ANGLE-45) empty)) (cons (make-invader (- 0 INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-MINUS-45) empty)) ; 45 -45
(check-expect (update-invaders (cons (make-invader 0 0 INVADER-ANGLE-MINUS-45) empty)) (cons (make-invader (+ 0 INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-45) empty)) ; -45 45
(check-expect (update-invaders (cons (make-invader 0 0 INVADER-ANGLE-MINUS-45) empty)) (cons (make-invader (- 0 INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-MINUS-45) empty)) ; -45 -45

(check-expect (update-invaders (cons (make-invader HEIGHT WIDTH INVADER-ANGLE-45) (cons (make-invader 0 0 INVADER-ANGLE-45) empty))) (cons (make-invader (+ HEIGHT INVADER-X-SPEED) (+ WIDTH INVADER-Y-SPEED) INVADER-ANGLE-45) (cons (make-invader (+ 0 INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-45) empty))); 45 45 -> 45 45
(check-expect (update-invaders (cons (make-invader HEIGHT WIDTH INVADER-ANGLE-MINUS-45) (cons (make-invader 0 0 INVADER-ANGLE-MINUS-45) empty))) (cons (make-invader (- HEIGHT INVADER-X-SPEED) (+ WIDTH INVADER-Y-SPEED) INVADER-ANGLE-MINUS-45) (cons (make-invader (- 0 INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-MINUS-45) empty))); -45 -45 -> -45 -45
(check-expect (update-invaders (cons (make-invader HEIGHT WIDTH INVADER-ANGLE-45) (cons (make-invader 0 0 INVADER-ANGLE-MINUS-45) empty))) (cons (make-invader (- HEIGHT INVADER-X-SPEED) (+ WIDTH INVADER-Y-SPEED) INVADER-ANGLE-MINUS-45) (cons (make-invader (+ 0 INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-45) empty))); 45 -45 -> -45 45
(check-expect (update-invaders (cons (make-invader HEIGHT WIDTH INVADER-ANGLE-MINUS-45) (cons (make-invader 0 0 INVADER-ANGLE-45) empty))) (cons (make-invader (+ HEIGHT INVADER-X-SPEED) (+ WIDTH INVADER-Y-SPEED) INVADER-ANGLE-45) (cons (make-invader (- 0 INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-MINUS-45) empty))); -45 45 -> 45 -45

(check-expect (update-invaders (cons (make-invader HEIGHT WIDTH INVADER-ANGLE-MINUS-45) (cons (make-invader 0 0 INVADER-ANGLE-MINUS-45) empty))) (cons (make-invader (- HEIGHT INVADER-X-SPEED) (+ WIDTH INVADER-Y-SPEED) INVADER-ANGLE-MINUS-45) (cons (make-invader (+ 0 INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-45) empty))); -45 -45 -> -45 45
(check-expect (update-invaders (cons (make-invader HEIGHT WIDTH INVADER-ANGLE-45      ) (cons (make-invader 0 0 INVADER-ANGLE-45) empty))) (cons (make-invader (+ HEIGHT INVADER-X-SPEED) (+ WIDTH INVADER-Y-SPEED) INVADER-ANGLE-45)       (cons (make-invader (- 0 INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-MINUS-45) empty)));  45 45 -> 45 -45
(check-expect (update-invaders (cons (make-invader HEIGHT WIDTH INVADER-ANGLE-45      ) (cons (make-invader 0 0 INVADER-ANGLE-45) empty))) (cons (make-invader (- HEIGHT INVADER-X-SPEED) (+ WIDTH INVADER-Y-SPEED) INVADER-ANGLE-MINUS-45) (cons (make-invader (+ 0 INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-45) empty))); 45 45 -> -45 45
(check-expect (update-invaders (cons (make-invader HEIGHT WIDTH INVADER-ANGLE-MINUS-45) (cons (make-invader 0 0 INVADER-ANGLE-45) empty))) (cons (make-invader (+ HEIGHT INVADER-X-SPEED) (+ WIDTH INVADER-Y-SPEED) INVADER-ANGLE-45) (cons (make-invader (- 0 INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-MINUS-45) empty))); -45 -45 -> 45 -45

;(define (update-invaders loi) loi); stub

(define (update-invaders loi)
  (cond [(empty? loi) empty]
        [ else
          (cons(update-invader(first loi))          ; Invader
               (update-invaders(rest loi)))]))       ; ListOfInvader

;; Invader -> Invader
;; update invader x,y,angle values -> INVADER-X-SPEED, INVADER-Y-SPEED, INVADER-ANGLE-45 or INVADER-ANGLE-MINUS-45
(check-expect (update-invader (make-invader (- INVADER-BOUNCE-RIGHT 4) 0 INVADER-ANGLE-45))                  (make-invader (+ (- INVADER-BOUNCE-RIGHT 4) INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-45)) ; 45 -> 45
(check-expect (update-invader (make-invader INVADER-BOUNCE-RIGHT (/ HEIGHT 2) INVADER-ANGLE-45))             (make-invader (- INVADER-BOUNCE-RIGHT INVADER-X-SPEED) (+ (/ HEIGHT 2) INVADER-Y-SPEED) INVADER-ANGLE-MINUS-45)) ; 45 -> -45
(check-expect (update-invader (make-invader INVADER-BOUNCE-LEFT (/ HEIGHT 2) INVADER-ANGLE-MINUS-45))        (make-invader (+ INVADER-BOUNCE-LEFT INVADER-X-SPEED) (+ (/ HEIGHT 2) INVADER-Y-SPEED) INVADER-ANGLE-45)); -45 -> 45
(check-expect (update-invader (make-invader (+ INVADER-BOUNCE-LEFT 10) (/ HEIGHT 2) INVADER-ANGLE-MINUS-45)) (make-invader (- (+ INVADER-BOUNCE-LEFT 10) INVADER-X-SPEED) (+ (/ HEIGHT 2) INVADER-Y-SPEED) INVADER-ANGLE-MINUS-45)); -45 -> -45 
;(define (update-invader i) i); stub

(define (update-invader i)
  (update-x-y(update_angle i)))

;; invader -> invader
;; update invader angle, if invader bounces off the edges flip angle sign else keep angle
(check-expect (update_angle (make-invader (- INVADER-BOUNCE-RIGHT 4) 0 INVADER-ANGLE-45)) (make-invader (- INVADER-BOUNCE-RIGHT 4) 0 INVADER-ANGLE-45)) ; inbound
(check-expect (update_angle (make-invader INVADER-BOUNCE-RIGHT (/ HEIGHT 2) INVADER-ANGLE-45)) (make-invader INVADER-BOUNCE-RIGHT (/ HEIGHT 2)  INVADER-ANGLE-MINUS-45)) ; off bound R
(check-expect (update_angle (make-invader INVADER-BOUNCE-LEFT (/ HEIGHT 2) INVADER-ANGLE-MINUS-45)) (make-invader INVADER-BOUNCE-LEFT (/ HEIGHT 2) INVADER-ANGLE-45)) ; off bound L
;(define (update_angle i) i);stub

(define (update_angle i)
  ( cond [ (<= (invader-x i) INVADER-BOUNCE-LEFT)  (make-invader (invader-x i)(invader-y i) INVADER-ANGLE-45)]
         [ (>= (invader-x i) INVADER-BOUNCE-RIGHT) (make-invader (invader-x i)(invader-y i) INVADER-ANGLE-MINUS-45)]
         [ else i]))

;; invader -> invader
;; update x,y position of invader, by adding INVADER-Y-SPEED to y and for x it depends on the angle (add/sub INVADER-X-SPEED)
(check-expect (update-x-y (make-invader (- INVADER-BOUNCE-RIGHT 4) 0 INVADER-ANGLE-45))                  (make-invader (+ (- INVADER-BOUNCE-RIGHT 4) INVADER-X-SPEED) (+ 0 INVADER-Y-SPEED) INVADER-ANGLE-45)) ; 45 -> 45
(check-expect (update-x-y (make-invader (+ INVADER-BOUNCE-LEFT 10) (/ HEIGHT 2) INVADER-ANGLE-MINUS-45)) (make-invader (- (+ INVADER-BOUNCE-LEFT 10) INVADER-X-SPEED) (+ (/ HEIGHT 2) INVADER-Y-SPEED) INVADER-ANGLE-MINUS-45)); -45 -> -45 
;(define (update-x-y i) i); stub

(define (update-x-y i)
  (if  (= INVADER-ANGLE-45 (invader-angle i))
       ( make-invader (+ (invader-x i) INVADER-X-SPEED)(+(invader-y i) INVADER-Y-SPEED)(invader-angle i) )
       ( make-invader (- (invader-x i) INVADER-X-SPEED)(+(invader-y i) INVADER-Y-SPEED)(invader-angle i))))


;; game -> Image
;; render tank, fire , invader into x,y position on the MTS
(check-expect (render-behaviour (make-game (make-tank (/ WIDTH 2) TANK-Y) (make-fire (/ WIDTH 2) (- HEIGHT 60)) (cons (make-invader (- WIDTH 100) (- HEIGHT 200) INVADER-ANGLE-45 ) (cons (make-invader (- WIDTH 200) (- HEIGHT 100)  INVADER-ANGLE-45 ) (cons (make-invader (- WIDTH 150) (- HEIGHT 250)  INVADER-ANGLE-MINUS-45 ) empty))))) (place-image
                                                                                                                                                                                                                                                                                                                                                                TANK
                                                                                                                                                                                                                                                                                                                                                                (/ WIDTH 2) (- HEIGHT TANK-BOTTOM)
                                                                                                                                                                                                                                                                                                                                                                (place-image
                                                                                                                                                                                                                                                                                                                                                                 FIRE
                                                                                                                                                                                                                                                                                                                                                                 (/ WIDTH 2) (- HEIGHT 60)
                                                                                                                                                                                                                                                                                                                                                                 (place-image
                                                                                                                                                                                                                                                                                                                                                                  INVADER
                                                                                                                                                                                                                                                                                                                                                                  (- WIDTH 100) (- HEIGHT 200)
                                                                                                                                                                                                                                                                                                                                                                  (place-image
                                                                                                                                                                                                                                                                                                                                                                   INVADER
                                                                                                                                                                                                                                                                                                                                                                   (- WIDTH 200) (- HEIGHT 100)
                                                                                                                                                                                                                                                                                                                                                                   (place-image
                                                                                                                                                                                                                                                                                                                                                                    INVADER
                                                                                                                                                                                                                                                                                                                                                                    (- WIDTH 150) (- HEIGHT 250)
                                                                                                                                                                                                                                                                                                                                                                    MTS
                                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                                   )
                                                                                                                                                                                                                                                                                                                                                                  ))
                                                                                                                                                                                                                                                                                                                                                                ))
(check-expect (render-behaviour (make-game (make-tank (- WIDTH 100) (- HEIGHT TANK-BOTTOM)) (make-fire (- WIDTH 100) (- HEIGHT 300)) (cons (make-invader (- WIDTH 100) (- HEIGHT 100) INVADER-ANGLE-45 ) (cons (make-invader (- WIDTH 150) (- HEIGHT 110)  INVADER-ANGLE-45 ) (cons (make-invader (- WIDTH 120) (- HEIGHT 190)  INVADER-ANGLE-MINUS-45 ) empty))))) (place-image
                                                                                                                                                                                                                                                                                                                                                                     TANK
                                                                                                                                                                                                                                                                                                                                                                     (- WIDTH 100) (- HEIGHT TANK-BOTTOM)
                                                                                                                                                                                                                                                                                                                                                                     (place-image
                                                                                                                                                                                                                                                                                                                                                                      FIRE
                                                                                                                                                                                                                                                                                                                                                                      (- WIDTH 100) (- HEIGHT 300)
                                                                                                                                                                                                                                                                                                                                                                      (place-image
                                                                                                                                                                                                                                                                                                                                                                       INVADER
                                                                                                                                                                                                                                                                                                                                                                       (- WIDTH 100) (- HEIGHT 100)
                                                                                                                                                                                                                                                                                                                                                                       (place-image
                                                                                                                                                                                                                                                                                                                                                                        INVADER
                                                                                                                                                                                                                                                                                                                                                                        (- WIDTH 150) (- HEIGHT 110) 
                                                                                                                                                                                                                                                                                                                                                                        (place-image
                                                                                                                                                                                                                                                                                                                                                                         INVADER
                                                                                                                                                                                                                                                                                                                                                                         (- WIDTH 120) (- HEIGHT 190)
                                                                                                                                                                                                                                                                                                                                                                         MTS
                                                                                                                                                                                                                                                                                                                                                                         )
                                                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                                                       ))))
  
;(define (render-behaviour g) MTS); stub

(define (render-behaviour g)
  (render-tank (game-t g) (render-fire (game-f g) (render-invaders (game-loi g)))))

;; ListOfInvader -> Image
;; render all the invaders in the loi into it's (x,y) position on the MTS
(check-expect (render-invaders empty) MTS)
(check-expect (render-invaders (cons (make-invader (/ WIDTH 2) (/ HEIGHT 2) INVADER-ANGLE-MINUS-45) empty)) (place-image INVADER
                                                                                                                         (/ WIDTH 2) (/ HEIGHT 2)
                                                                                                                         MTS
                                                                                                                         ))
(check-expect (render-invaders (cons (make-invader (- WIDTH 100) (- HEIGHT 50) INVADER-ANGLE-45) (cons (make-invader (/ WIDTH 2) (/ HEIGHT 2) INVADER-ANGLE-MINUS-45) (cons (make-invader (- WIDTH 10) (- HEIGHT 102) INVADER-ANGLE-MINUS-45) empty) ))
                               ) (place-image INVADER
                                              (- WIDTH 100) (- HEIGHT 50)
                                              (place-image INVADER
                                                           (/ WIDTH 2) (/ HEIGHT 2)
                                                           (place-image INVADER
                                                                        (- WIDTH 10) (- HEIGHT 102)
                                                                        MTS))))
;(define (render-invaders loi) empty-image); stub

(define (render-invaders loi)
  (cond [(empty? loi) MTS]
        [ else
          (place-image INVADER
                       (invader-x (first loi)) (invader-y (first loi))      ; Invader
                       (render-invaders(rest loi)))]))       ; ListOfInvader


;; Fire Image -> Image
;; render fire into it's (x,y) position on the (scene returned from render-invaders (has INVADERS rendered on the MTS))
(check-expect (render-fire (make-fire (- WIDTH 100) (- HEIGHT 50)) MTS) (place-image FIRE
                                                                                     (- WIDTH 100) (- HEIGHT 50)
                                                                                     MTS))
(check-expect (render-fire (make-fire (- WIDTH  30) (- HEIGHT 80)) (place-image INVADER
                                                                                (/ WIDTH 2) (/ HEIGHT 2)
                                                                                MTS
                                                                                )) (place-image FIRE
                                                                                                (- WIDTH  30) (- HEIGHT 80)
                                                                                                (place-image INVADER
                                                                                                             (/ WIDTH 2) (/ HEIGHT 2)
                                                                                                             MTS )))
;(define (render-fire f img) empty-image); stub

(define (render-fire f scene)
  (place-image FIRE
               (fire-x f)(fire-y f)
               scene))


;; Tank Image -> Image
;; render tank into it's (x,y) position on the (scene returned from render-fire (has FIRE and INVADERS rendered on the MTS))
(check-expect (render-tank (make-tank (/ WIDTH 2) TANK-Y) MTS) (place-image TANK
                                                                                 (/ WIDTH 2) TANK-Y
                                                                                 MTS))
(check-expect (render-tank (make-tank (- WIDTH  30) TANK-Y) (place-image FIRE
                                                                                        (- WIDTH  30) (- HEIGHT 80)
                                                                                        (place-image INVADER
                                                                                                     (/ WIDTH 2) (/ HEIGHT 2)
                                                                                                     MTS ))) (place-image TANK
                                                                                                                          (- WIDTH  30) TANK-Y
                                                                                                                          (place-image FIRE
                                                                                                                                       (- WIDTH  30) (- HEIGHT 80)
                                                                                                                                       (place-image INVADER
                                                                                                                                                    (/ WIDTH 2) (/ HEIGHT 2)
                                                                                                                                                    MTS )))); stub
;(define (render-tank t scene) MTS); stub

(define (render-tank t scene)
  (place-image TANK
               (tank-x t)(tank-y t)
               scene))

;; game -> boolean
;; Game over if invader reaches the bottom of the screen
;; !!!
(define (end-game g) true); stub

;; game KeyEvent -> game
;; arrow key - tank moves right and left, space bar fire missiles
;; !!!
(define (handle-key g ke) GAME-1); stub